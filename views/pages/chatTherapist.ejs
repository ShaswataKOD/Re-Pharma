<% layout("/layouts/boilerplate") %>

<style>
    :root {
        --primCol: rgb(210, 231, 229);
        --bgCol: rgb(151, 189, 210);
        --SecCol: #57b3cd;
        --terCol: #54978b;
        --quadCol: #7de8d5;
    }

    body {
        background-color: var(--bgCol);
    }

    .chat-header {
        background: var(--SecCol);
        color: white;
        padding: 15px;
        text-align: center;
        font-size: 18px;
        font-weight: bold;
    }

    .chat-container {
        width: 80vw;
        height: 600px;
        background: var(--bgCol);
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        display: flex;
        flex-direction: column;
        overflow: hidden;
        position: relative;
        left: 35px;
    }

    #chat-box {
        flex: 1;
        padding: 10px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 8px;
        background: var(--primCol);
    }

    .message {
        padding: 8px 12px;
        border-radius: 8px;
        max-width: 70%;
        word-wrap: break-word;
    }
    .user-message {
        align-self: flex-end;
        background: var(--quadCol);
    }
    .ai-message {
        align-self: flex-start;
        background: var(--SecCol);
        color: white;
    }

    .chat-input {
        display: flex;
        border-top: 1px solid #ccc;
        padding: 10px;
        background: #f8f9fa;
    }
    #message-input {
        flex: 1;
        padding: 8px;
        border: none;
        border-radius: 5px;
        outline: none;
    }
    #send-button, #video-call-button {
        background: var(--SecCol);
        color: white;
        border: none;
        padding: 8px 15px;
        margin-left: 8px;
        border-radius: 5px;
        cursor: pointer;
    }

    #video-call-container {
        display: none;
        background: var(--primCol);
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        text-align: center;
        margin-top: 20px;
    }

    video {
        width: 45%;
        border-radius: 8px;
        margin: 10px;
    }
</style>

<div class="chat-container">
    <div class="chat-header">Video Call Chat</div>
    <div id="chat-box"></div>
    <div class="chat-input">
        <input type="text" id="message-input" placeholder="Type your message...">
        <button id="send-button" onclick="sendMessage()">Send</button>
        <button id="video-call-button" onclick="startCall()">Video Call</button>
    </div>
</div>

<div id="video-call-container">
    <video id="local-video" autoplay playsinline></video>
    <video id="remote-video" autoplay playsinline></video>
</div>

<script src="/socket.io/socket.io.js"></script>
<script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
<script>
    const socket = io();
    const userId = "<%= user._id %>";
    const recipientId = "<%= recipient._id %>";

    function sendMessage() {
        let messageInput = document.getElementById('message-input');
        let message = messageInput.value.trim();
        if (message) {
            socket.emit('chatMessage', { sender: userId, receiver: recipientId, message });
            messageInput.value = '';
        }
    }

    socket.on('messageReceived', (data) => {
        let chatBox = document.getElementById('chat-box');
        let messageDiv = document.createElement('div');
        messageDiv.classList.add('message', data.sender === userId ? 'user-message' : 'ai-message');
        messageDiv.innerHTML = `<strong>${data.sender === userId ? 'You' : 'Them'}:</strong> ${data.message}`;
        chatBox.appendChild(messageDiv);
        chatBox.scrollTop = chatBox.scrollHeight;
    });

    const peer = new Peer(userId, { host: '/', port: 3000, path: '/peerjs' });

    function startCall() {
        navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {
            document.getElementById('local-video').srcObject = stream;
            document.getElementById('video-call-container').style.display = "block";

            const call = peer.call(recipientId, stream);
            call.on('stream', (remoteStream) => {
                document.getElementById('remote-video').srcObject = remoteStream;
            });

            socket.emit('callUser', { userToCall: recipientId, from: userId, signal: call });
        });
    }

    peer.on('call', (call) => {
        navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {
            call.answer(stream);
            document.getElementById('local-video').srcObject = stream;
            document.getElementById('video-call-container').style.display = "block";

            call.on('stream', (remoteStream) => {
                document.getElementById('remote-video').srcObject = remoteStream;
            });
        });
    });

    document.getElementById("message-input").addEventListener("keypress", (event) => {
        if (event.key === "Enter") {
            event.preventDefault();
            sendMessage();
        }
    });
</script>

